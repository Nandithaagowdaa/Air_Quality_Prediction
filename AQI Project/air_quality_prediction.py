# -*- coding: utf-8 -*-
"""Air Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KIEj3E6t9AYJakRZvlnYuDkZjnNGGo-z
"""

import pandas as pd
import pickle 

from sklearn.preprocessing import OneHotEncoder

"""Load CSV"""

df=pd.read_csv("AQI Project/Dataset for AQI/city_day.csv")

df.head(5)

df.isnull().sum()

"""Information of Data"""

df.info()

column_types =df.dtypes
print("\nData Types of Columns:")
print(column_types)

print(df['City'])

"""Check NULL values"""

df.isnull().sum()

def fillna_with_mean(df):
  """fill the NaN values with the column mean value"""
  exe_col = ['City','Date','AQI_Bucket']
  num_col = df.select_dtypes(include=['int64','float64']).columns
  num_col = [col for col in num_col if col not in exe_col]

  for col in num_col:
    mean = df[col].mean()
    df[col] = df[col].fillna(mean)
  return df

df = fillna_with_mean(df)

"""Create Feature set

"""

x1=df.iloc[:,:14].values
x1.shape

x1[0]

y1=df.iloc[:,14:15].values
y1.shape

z1=pd.DataFrame(x1,columns=df.columns[:14])
z1.head()

#Drop the date Column
z1=z1.drop(["Date"],axis=1)

z1.head()

x1=z1.iloc[:,0:13].values
z1=pd.DataFrame(x1)

z1.head()

z1[0].nunique()

"""Final Feature Set"""

ohe = OneHotEncoder(drop='first')
x1_new=pd.DataFrame(ohe.fit_transform(x1[:,[0]]).toarray())#state
feature_set=pd.concat([x1_new,pd.DataFrame(z1.iloc[:,1:].values)],axis=1,sort=False)

ohe.transform([["Ahmedabad"]])

import os

# Create the directory if it doesn't exist
if not os.path.exists('Models'):
    os.makedirs('Models')

# Now save the pickle file
pickle.dump(ohe,open("Models/OneHotEncoder_Featureset.pkl","wb"))

feature_set

"""Model training"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

x_train,x_test,y_train,y_test=train_test_split(feature_set,y1,test_size=0.2,random_state=0)

#Multiple Linear regreesion Model
mreg = LinearRegression()
mreg.fit(x_train,y_train)

y_predict = mreg.predict(x_test)

mreg.score(x_test,y_test)

"""df2=pd.DataFrame({'Acutal':y_test ,'Predict':y_predict})"""

print(df)
from matplotlib import pyplot as plt
#Visualize the best fit line
#df['Date']=pd.to_datetime(df['Date'])
#df['year']=df['Date'].dt.year
#year=df['year']

plt.plot(y_predict[:20],color='red',marker='o',markersize='12',label='Predict')
plt.plot(y_test[:20],color='blue',linestyle='dashed',linewidth='2',label='Actual')
plt.title("AQI Level in Diffrent Years")
plt.ylabel("AQI")
plt.legend()
plt.show()

"""Polynomial Regression Model
Degree = 2
"""

#Make sure you test polynomial regression,first transform the dta with 2 degree
poly_reg = PolynomialFeatures(degree=2)
preg=LinearRegression()
pf=poly_reg.fit_transform(x_train)
preg.fit(pf,y_train)

pr_y_predict=preg.predict(poly_reg.fit_transform(x_test))

preg.score(poly_reg.fit_transform(x_test),y_test)

pickle.dump(poly_reg,open("Models/poly_reg.pkl","wb"))

plt.plot(pr_y_predict[:20],color='red',marker='o',markersize='12',label='Predict')
plt.plot(y_test[:20],color='blue',linestyle='dashed',linewidth='2',label='Actual')
plt.title("AQI Level in Diffrent Years")
plt.ylabel("AQI")
plt.legend()
plt.show()

"""Decision Tree Regression Model"""

dec_tree = DecisionTreeRegressor(random_state=0)
dec_tree.fit(x_train,y_train)

dt_y_predict = dec_tree.predict(x_test)

dec_tree.score(x_test,y_test)

plt.plot(dt_y_predict[:20],color='red',marker='o',markersize='12',label='Predict')
plt.plot(y_test[:20],color='blue',linestyle='dashed',linewidth='2',label='Actual')
plt.title("AQI Level in Diffrent Years")
plt.ylabel("AQI")
plt.legend()
plt.show()

"""Random Forest Regresssion model"""

from sklearn.ensemble import RandomForestRegressor

#Reshape the target variable y_train and y_test
y_train_reshaped = y_train.ravel()
y_test_reshaped = y_test.ravel()

# Create and train the Random Forest Regressor
rt_reg = RandomForestRegressor(n_estimators=500, random_state=0)
rt_reg.fit(x_train, y_train_reshaped)

#Make Predictions
rt_y_predict = rt_reg.predict(x_test)

rt_reg=RandomForestRegressor(n_estimators=500, random_state=0)
rt_reg.fit(x_train,y_train)
rt_y_predict=rt_reg.predict(x_test)

rt_reg.score(x_test,y_test)

plt.plot(rt_y_predict[:20],color='red',marker='o',markersize='12',label='Predict')
plt.plot(y_test[:20],color='blue',linestyle='dashed',linewidth='2',label='Actual')
plt.title("AQI Level in Diffrent Years")
plt.ylabel("AQI")
plt.legend()
plt.show()

#Feature Scaling the Parameters for better results

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
sc_y=StandardScaler()
x_train_svr = sc_x.fit_transform(x_train)
#y_train_svr = sc_y.fit_transform(y_train)

pickle.dump(sc_x,open("Models/Standard_Scaler_X_SVR.pkl","wb"))

svr_reg = SVR()
svr_reg.fit(x_train_svr,y_train)

x_test.shape

sc_x.transform(x_test).shape

svr_y_predict = svr_reg.predict(sc_x.transform(x_test))

svr_reg.score(sc_x.transform(x_test),y_test)

#svr_y_predict = sc_y.inverse_transform(svr_reg.predict(sc_x.transform(x_test)))

plt.plot(svr_y_predict[:20],color='red',marker='o',markersize='12',label='Predict')
plt.plot(y_test[:20],color='blue',linestyle='dashed',linewidth='2',label='Actual')
plt.title("AQI Level in Diffrent Years")
plt.ylabel("AQI")
plt.legend()
plt.show()

"""Use the loaded pickel values to make predictions"""

import pickle

pickle.dump (mreg,open("Models/Multiple Regression.pkl","wb"))
pickle.dump(preg,open("Models/pregression.pkl","wb"))
pickle.dump(dec_tree,open("Models/Decision Tree.pkl","wb"))
pickle.dump(rt_reg,open("Models/Random Forest.pkl","wb"))
pickle.dump(svr_reg,open("Models/svrression.pkl","wb"))

"""Load Pickle Model"""

with open("Models/pregression.pkl","rb") as model:
  pregression=pickle.load(model)

#Load model from file
#pregression.predict(x_test)
pregression.predict(poly_reg.fit_transform(x_test))

pregression.score(poly_reg.fit_transform(x_test),y_test)

"""Develop a streamlit"""

model_list = ['MR','PR','DTR','RF','SVR']
import streamlit as st
if st.checkbox('Select columns to show'):
  selected=st.multiselect('Select',model_list)
  #new df = df[selected]
  st.write(selected)

